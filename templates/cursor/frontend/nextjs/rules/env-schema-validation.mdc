---
description: Environment variable schema validation for Next.js applications
globs: **/*.{ts,tsx,js,jsx}
alwaysApply: true
---

# Environment Variable Schema Validation

## Use Type-Safe Environment Variables

### Install and Configure Zod
```typescript
// env.mjs
import { z } from 'zod'

const envSchema = z.object({
  // Node environment
  NODE_ENV: z.enum(['development', 'production', 'test']),
  
  // Public variables (exposed to client)
  NEXT_PUBLIC_APP_URL: z.string().url(),
  NEXT_PUBLIC_API_URL: z.string().url(),
  NEXT_PUBLIC_GA_ID: z.string().optional(),
  
  // Server-only variables
  DATABASE_URL: z.string().url(),
  API_KEY: z.string().min(1),
  JWT_SECRET: z.string().min(32),
  SMTP_HOST: z.string().optional(),
  SMTP_PORT: z.string().regex(/^\d+$/).transform(Number).optional(),
})

// Validate environment variables
export const env = envSchema.parse(process.env)
```

### T3 Env Integration
```typescript
// env.mjs using @t3-oss/env-nextjs
import { createEnv } from '@t3-oss/env-nextjs'
import { z } from 'zod'

export const env = createEnv({
  server: {
    DATABASE_URL: z.string().url(),
    API_KEY: z.string().min(1),
    JWT_SECRET: z.string().min(32),
  },
  client: {
    NEXT_PUBLIC_APP_URL: z.string().url(),
    NEXT_PUBLIC_API_URL: z.string().url(),
  },
  runtimeEnv: {
    DATABASE_URL: process.env.DATABASE_URL,
    API_KEY: process.env.API_KEY,
    JWT_SECRET: process.env.JWT_SECRET,
    NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,
    NEXT_PUBLIC_API_URL: process.env.NEXT_PUBLIC_API_URL,
  },
})
```

## Best Practices

### Environment File Structure
```
.env                    # Shared environment variables
.env.local              # Local overrides (gitignored)
.env.development        # Development environment
.env.production         # Production environment
.env.test              # Test environment
```

### Validation Rules
- Always validate environment variables at build time
- Use strict typing for all variables
- Provide sensible defaults where appropriate
- Transform string values to proper types (numbers, booleans)
- Use enums for predefined values
- Validate URLs, ports, and other formatted strings

### Error Handling
```typescript
try {
  const env = envSchema.parse(process.env)
} catch (error) {
  console.error('❌ Invalid environment variables:')
  console.error(error.flatten())
  throw new Error('Invalid environment variables')
}
```

### TypeScript Integration
```typescript
// global.d.ts
declare global {
  namespace NodeJS {
    interface ProcessEnv extends z.infer<typeof envSchema> {}
  }
}
```

### Usage in Application
```typescript
// ✅ Good - Type-safe access
import { env } from '@/env.mjs'
const apiUrl = env.NEXT_PUBLIC_API_URL

// ❌ Bad - Direct process.env access
const apiUrl = process.env.NEXT_PUBLIC_API_URL
```

## Security Considerations

- Never expose server-only variables to client code
- Use NEXT_PUBLIC_ prefix for client-exposed variables
- Validate all external inputs
- Don't commit .env.local files
- Use secrets management in production
- Rotate sensitive keys regularly

## Testing Environment Variables

```typescript
// env.test.ts
describe('Environment validation', () => {
  it('should validate required variables', () => {
    const testEnv = {
      NODE_ENV: 'test',
      DATABASE_URL: 'postgres://localhost:5432/test',
      // ... other required vars
    }
    
    expect(() => envSchema.parse(testEnv)).not.toThrow()
  })
  
  it('should reject invalid URLs', () => {
    const testEnv = {
      DATABASE_URL: 'invalid-url',
    }
    
    expect(() => envSchema.parse(testEnv)).toThrow()
  })
})
```